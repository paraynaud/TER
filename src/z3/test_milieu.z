;options

(set-option :produce-unsat-cores true)
(set-option :produce-proofs true)

;declaration des fonctions

(declare-fun P_57_1 (Int Int Int Int Int ) Bool)
(declare-fun P_57_2 (Int Int Int Int Int ) Bool)
(declare-fun P_57_3 (Int Int Int Int Int ) Bool)
(declare-fun P_57_4 (Int Int Int Int Int ) Bool)
(declare-fun P_57_5 (Int Int Int Int Int ) Bool)
(declare-fun P_57_6 (Int Int Int Int Int ) Bool)
(declare-fun P_57_7 (Int Int Int Int Int ) Bool)
(declare-fun P_57_8 (Int Int Int Int Int ) Bool)
(declare-fun P_57_9 (Int Int Int Int Int ) Bool)

;sule:/local/raynaudp/TER/Z3/z3/build$ ./z3 /local/raynaudp/TER/CompCert_et_lib/CompCert/LIEN_AFFICHAGE/original/Z3/real_work/rapport/test_milieu.z 

; definition de la post_condition
(define-fun post_57 ((b Int)(a Int) (y Int) (x Int) (x5 Int)) Bool ; x = x4 y = x3 ; a = x2 ;b = x1
  (and 
    (<= 0 (- x y))
    (<= (- x y) 1)
    (<= (* 2 y) (+ a b))
    (<= (+ a b) (* 2 x))   
  )
)

; definition de la pre_condition
(define-fun pre_57 ((b Int)(a Int) (y Int) (x Int) (x5 Int)) Bool ; x = x4 y = x3 ; a = x2 ;b = x1
  (and 
    (<= a b) 
    (<= 0 b) 
    (<= b 7)
    (<= 0 a)
    (<= a 7)  
  )
)


(assert(! 
    (forall ((x1 Int ) (x2 Int ) (x3 Int ) (x4 Int ) (x5 Int ))
      (=> (pre_57 x1 x2 x3 x4 x5) (P_57_9 x1 x2 x3 x4 x5) )
    ) 
  :named et)  
)    

;definition du programme
(assert    ( !
		(forall ( (x_57_9_5 Int  ) (x_57_9_4 Int  ) (x_57_9_3 Int  ) (x_57_9_2 Int  ) (x_57_9_1 Int  ) (x_57_8_5 Int  ) (x_57_8_4 Int  ) (x_57_8_3 Int  ) (x_57_8_2 Int  ) (x_57_8_1 Int  ) )
			( =>
 				(P_57_9 x_57_9_1 x_57_9_2 x_57_9_3 x_57_9_4 x_57_9_5 )
				(P_57_8 x_57_9_1 x_57_9_2 x_57_9_3 x_57_9_2  x_57_9_5 )
			)
		)
  :named P9)
)

(assert    (!
		(forall ( (x_57_8_5 Int  ) (x_57_8_4 Int  ) (x_57_8_3 Int  ) (x_57_8_2 Int  ) (x_57_8_1 Int  )  )
			( =>
 				(P_57_8 x_57_8_1 x_57_8_2 x_57_8_3 x_57_8_4 x_57_8_5 )
  			(P_57_7 x_57_8_1 x_57_8_2 x_57_8_1  x_57_8_4 x_57_8_5  )
			)
		)
  :named P8)
)

(assert (! 
		(forall ( (x_57_7_5 Int  ) (x_57_7_4 Int  ) (x_57_7_3 Int  ) (x_57_7_2 Int  ) (x_57_7_1 Int  )  )
			( =>
 			  (P_57_7 x_57_7_1 x_57_7_2 x_57_7_3 x_57_7_4 x_57_7_5 )
  			(P_57_6 x_57_7_1 x_57_7_2 x_57_7_3 x_57_7_4 x_57_7_5 )
			)			  
		)
  :named P7)
)


(assert (!  
		(forall (  (x_57_6_5 Int  ) (x_57_6_4 Int  ) (x_57_6_3 Int  ) (x_57_6_2 Int  ) (x_57_6_1 Int  ))
      ( =>
        (and 
          ( <= x_57_6_4  x_57_6_3  )
			    (P_57_6 x_57_6_1 x_57_6_2 x_57_6_3 x_57_6_4 x_57_6_5 )
        )
			  (P_57_5 x_57_6_1 x_57_6_2 x_57_6_3 x_57_6_4 x_57_6_5 )
		  )
    )               
  :named P6_1)
)

(assert (!  
		(forall ( (x_57_6_5 Int  ) (x_57_6_4 Int  ) (x_57_6_3 Int  ) (x_57_6_2 Int  ) (x_57_6_1 Int  ))
		  ( =>
        (and
          (not( <= x_57_6_4  x_57_6_3  ) )  
		      (P_57_6 x_57_6_1 x_57_6_2 x_57_6_3 x_57_6_4 x_57_6_5 )
        )
	      (P_57_2 x_57_6_1 x_57_6_2 x_57_6_3 x_57_6_4 x_57_6_5 )
      )
    )              
  :named P6_2)
)


(assert  (!  
		(forall ( (x_57_5_5 Int  ) (x_57_5_4 Int  ) (x_57_5_3 Int  ) (x_57_5_2 Int  ) (x_57_5_1 Int  ))
			( =>
 				(P_57_5 x_57_5_1 x_57_5_2 x_57_5_3 x_57_5_4 x_57_5_5 )
			  (P_57_4 x_57_5_1 x_57_5_2 x_57_5_3 (+ x_57_5_4  1 ) x_57_5_5 )			
			)
		)
  :named P5)
)

(assert( !
		(forall ( (x_57_4_5 Int  ) (x_57_4_4 Int  ) (x_57_4_3 Int  ) (x_57_4_2 Int  ) (x_57_4_1 Int  ))
			( =>
				(P_57_4 x_57_4_1 x_57_4_2 x_57_4_3 x_57_4_4 x_57_4_5 )
  			(P_57_3 x_57_4_1 x_57_4_2 (- x_57_4_3  1 ) x_57_4_4 x_57_4_5 )
			)
		)
  :named P4)  
)

(assert    (!
		(forall ( (x_57_3_5 Int  ) (x_57_3_4 Int  ) (x_57_3_3 Int  ) (x_57_3_2 Int  ) (x_57_3_1 Int  ))
			( =>
 				(P_57_3 x_57_3_1 x_57_3_2 x_57_3_3 x_57_3_4 x_57_3_5 )
				(P_57_6 x_57_3_1 x_57_3_2 x_57_3_3 x_57_3_4 x_57_3_5 )				
			) 
		)
  :named P3)
)

(assert   (!  
		(forall ( (x_57_2_5 Int  ) (x_57_2_4 Int  ) (x_57_2_3 Int  ) (x_57_2_2 Int  ) (x_57_2_1 Int  ) )
			( =>
 				(P_57_2 x_57_2_1 x_57_2_2 x_57_2_3 x_57_2_4 x_57_2_5 )
  			(P_57_1 x_57_2_1 x_57_2_2 x_57_2_3 x_57_2_4 0)
			)
		)
  :named P2)  
)
;fin du programme

;vérification de la post_condition
(assert  (!
  (forall ( (x1 Int) (x2 Int) (x3 Int) (x4 Int) (x5 Int))  
    (=>  
      (P_57_1 x1 x2 x3 x4 x5) 
      (post_57 x1 x2 x3 x4 x5) 
    )    
  )
  :named post)
)
      
;vérification de la satisfaisabilité des formules précédentes
(check-sat)
;(get-unsat-core)
;(get-model)


