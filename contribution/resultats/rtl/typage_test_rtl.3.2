(*
AFFICHAGE CLASSIQUE(ORIGINAL)(print_program) 
test_typage(x1) {
    3:	x1 = 1.f
    2:	x1 = 4.f
    1:	return
}

test_typage2(x1) {
   11:	x6 = x1 + 3 (int)
   10:	if (x6 <s 5) goto 8 else goto 9
    9:	x2 = 0
	goto 7
    8:	x2 = x1 >s 0
    7:	if (x2 !=u 0) goto 5 else goto 6
    6:	x3 = 0
	goto 4
    5:	x3 = x1 >s 1
    4:	if (x3 !=u 0) goto 2 else goto 3
    3:	x4 = 5
	goto 1
    2:	x4 = x1 ==s x1
    1:	return
}

typage(x1) {
    4:	if (x1 >s 2) goto 2 else goto 3
    3:	x2 = 4
	goto 1
    2:	x2 = x1 ==s x1
    1:	return
}

typage2(x1) {
    2:	x2 = x1 * 4 + 0 (int)
    1:	return
}

tableau(x2, x1) {
    4:	x4 = long32signed(x2)
    3:	x5 = 0
    2:	int32[x1 + x4 * 4 + 0] = x5
    1:	return
}

test_struct(x3, x2, x1) {
    4:	int32[stack(0)] = x2
    3:	float32[stack(4)] = x1
    2:	int32[stack(8)] = x3
    1:	return
}

test_operation(x3, x2, x1) {
    6:	x9 = x3 + x2 + 0 (int)
    5:	x7 = x9 + x1 * 2 + 0 (int)
    4:	x8 = x3 ==s x3
    3:	x6 = x7 + x8 + 0 (int)
    2:	x4 = singleofint(x6)
    1:	return
}

test_condition() {
    3:	if (x1 !=u 0) goto 2 else goto 1
    2:	x1 = x1 ==s 0
    1:	return
}

test_condition_complet() {
    4:	if (x1 !=u 0) goto 2 else goto 3
    3:	x1 = 5
	goto 1
    2:	x1 = x1 ==s 0
    1:	return
}

test_condition_complet_arg(x1) {
    4:	if (x1 !=u 0) goto 2 else goto 3
    3:	x1 = 5
	goto 1
    2:	x1 = x1 ==s 0
    1:	return
}

test_appel(x1) {
    2:	x3 = intofsingle(x1)
    1:	tailcall "typage2"(x3)
}

test_double_condition(x1) {
    7:	if (x1 <s 5) goto 5 else goto 6
    6:	x2 = 0
	goto 4
    5:	x2 = x1 >s 1
    4:	if (x2 !=u 0) goto 2 else goto 3
    3:	x3 = 2
	goto 1
    2:	x3 = 3
    1:	return
}






AFFICHAGE PAR INSTRUCTION (print_program2)




test_typage(x1) {
    3:	(RTL.Iop (
   (Op.Osingleconst
      (Fappli_IEEE.B754_finite (false,
         (BinNums.Coq_xO
            (BinNums.Coq_xO
               (BinNums.Coq_xO
                  (BinNums.Coq_xO
                     (BinNums.Coq_xO
                        (BinNums.Coq_xO
                           (BinNums.Coq_xO
                              (BinNums.Coq_xO
                                 (BinNums.Coq_xO
                                    (BinNums.Coq_xO
                                       (BinNums.Coq_xO
                                          (BinNums.Coq_xO
                                             (BinNums.Coq_xO
                                                (BinNums.Coq_xO
                                                   (BinNums.Coq_xO
                                                      (BinNums.Coq_xO
                                                         (BinNums.Coq_xO
                                                            (BinNums.Coq_xO
                                                               (BinNums.Coq_xO
                                                                  (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    BinNums.Coq_xH))))))))))))))))))))))),
         (BinNums.Zneg
            (BinNums.Coq_xI
               (BinNums.Coq_xI
                  (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))))
         ))),
   [], BinNums.Coq_xH, (BinNums.Coq_xO BinNums.Coq_xH)))
    2:	(RTL.Iop (
   (Op.Osingleconst
      (Fappli_IEEE.B754_finite (false,
         (BinNums.Coq_xO
            (BinNums.Coq_xO
               (BinNums.Coq_xO
                  (BinNums.Coq_xO
                     (BinNums.Coq_xO
                        (BinNums.Coq_xO
                           (BinNums.Coq_xO
                              (BinNums.Coq_xO
                                 (BinNums.Coq_xO
                                    (BinNums.Coq_xO
                                       (BinNums.Coq_xO
                                          (BinNums.Coq_xO
                                             (BinNums.Coq_xO
                                                (BinNums.Coq_xO
                                                   (BinNums.Coq_xO
                                                      (BinNums.Coq_xO
                                                         (BinNums.Coq_xO
                                                            (BinNums.Coq_xO
                                                               (BinNums.Coq_xO
                                                                  (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    BinNums.Coq_xH))))))))))))))))))))))),
         (BinNums.Zneg
            (BinNums.Coq_xI
               (BinNums.Coq_xO
                  (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))))
         ))),
   [], BinNums.Coq_xH, BinNums.Coq_xH))
    1:	(RTL.Ireturn None)
}

test_typage2(x1) {
   11:	(RTL.Iop (
   (Op.Olea (Op.Aindexed (BinNums.Zpos (BinNums.Coq_xI BinNums.Coq_xH)))),
   [BinNums.Coq_xH], (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH)),
   (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))))
   10:	(RTL.Icond (
   (Op.Ccompimm (Integers.Clt,
      (BinNums.Zpos (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH))))),
   [(BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))],
   (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))),
   (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))))
    9:	(RTL.Iop ((Op.Ointconst BinNums.Z0), [], (BinNums.Coq_xO BinNums.Coq_xH),
   (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH))))
    8:	(RTL.Iop ((Op.Ocmp (Op.Ccompimm (Integers.Cgt, BinNums.Z0))),
   [BinNums.Coq_xH], (BinNums.Coq_xO BinNums.Coq_xH),
   (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH))))
    7:	(RTL.Icond ((Op.Ccompuimm (Integers.Cne, BinNums.Z0)),
   [(BinNums.Coq_xO BinNums.Coq_xH)],
   (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)),
   (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))))
    6:	(RTL.Iop ((Op.Ointconst BinNums.Z0), [], (BinNums.Coq_xI BinNums.Coq_xH),
   (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))
    5:	(RTL.Iop (
   (Op.Ocmp (Op.Ccompimm (Integers.Cgt, (BinNums.Zpos BinNums.Coq_xH)))),
   [BinNums.Coq_xH], (BinNums.Coq_xI BinNums.Coq_xH),
   (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))
    4:	(RTL.Icond ((Op.Ccompuimm (Integers.Cne, BinNums.Z0)),
   [(BinNums.Coq_xI BinNums.Coq_xH)], (BinNums.Coq_xO BinNums.Coq_xH),
   (BinNums.Coq_xI BinNums.Coq_xH)))
    3:	(RTL.Iop (
   (Op.Ointconst
      (BinNums.Zpos (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))),
   [], (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)), BinNums.Coq_xH))
    2:	(RTL.Iop ((Op.Ocmp (Op.Ccomp Integers.Ceq)),
   [BinNums.Coq_xH; BinNums.Coq_xH],
   (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)), BinNums.Coq_xH))
    1:	(RTL.Ireturn None)
}

typage(x1) {
    4:	(RTL.Icond (
   (Op.Ccompimm (Integers.Cgt, (BinNums.Zpos (BinNums.Coq_xO BinNums.Coq_xH))
      )),
   [BinNums.Coq_xH], (BinNums.Coq_xO BinNums.Coq_xH),
   (BinNums.Coq_xI BinNums.Coq_xH)))
    3:	(RTL.Iop (
   (Op.Ointconst
      (BinNums.Zpos (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))),
   [], (BinNums.Coq_xO BinNums.Coq_xH), BinNums.Coq_xH))
    2:	(RTL.Iop ((Op.Ocmp (Op.Ccomp Integers.Ceq)),
   [BinNums.Coq_xH; BinNums.Coq_xH], (BinNums.Coq_xO BinNums.Coq_xH),
   BinNums.Coq_xH))
    1:	(RTL.Ireturn None)
}

typage2(x1) {
    2:	(RTL.Iop (
   (Op.Olea
      (Op.Ascaled (
         (BinNums.Zpos (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))),
         BinNums.Z0))),
   [BinNums.Coq_xH], (BinNums.Coq_xO BinNums.Coq_xH), BinNums.Coq_xH))
    1:	(RTL.Ireturn None)
}

tableau(x2, x1) {
    4:	(RTL.Iop (Op.Ocast32signed, [(BinNums.Coq_xO BinNums.Coq_xH)],
   (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)),
   (BinNums.Coq_xI BinNums.Coq_xH)))
    3:	(RTL.Iop ((Op.Ointconst BinNums.Z0), [],
   (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)),
   (BinNums.Coq_xO BinNums.Coq_xH)))
    2:	(RTL.Istore (AST.Mint32,
   (Op.Aindexed2scaled (
      (BinNums.Zpos (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))),
      BinNums.Z0)),
   [BinNums.Coq_xH; (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))],
   (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)), BinNums.Coq_xH))
    1:	(RTL.Ireturn None)
}

test_struct(x3, x2, x1) {
    4:	(RTL.Istore (AST.Mint32, (Op.Ainstack BinNums.Z0), [],
   (BinNums.Coq_xO BinNums.Coq_xH), (BinNums.Coq_xI BinNums.Coq_xH)))
    3:	(RTL.Istore (AST.Mfloat32,
   (Op.Ainstack
      (BinNums.Zpos (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))),
   [], BinNums.Coq_xH, (BinNums.Coq_xO BinNums.Coq_xH)))
    2:	(RTL.Istore (AST.Mint32,
   (Op.Ainstack
      (BinNums.Zpos
         (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))),
   [], (BinNums.Coq_xI BinNums.Coq_xH), BinNums.Coq_xH))
    1:	(RTL.Ireturn None)
}

test_operation(x3, x2, x1) {
    6:	(RTL.Iop ((Op.Olea (Op.Aindexed2 BinNums.Z0)),
   [(BinNums.Coq_xI BinNums.Coq_xH); (BinNums.Coq_xO BinNums.Coq_xH)],
   (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))),
   (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH))))
    5:	(RTL.Iop (
   (Op.Olea
      (Op.Aindexed2scaled ((BinNums.Zpos (BinNums.Coq_xO BinNums.Coq_xH)),
         BinNums.Z0))),
   [(BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)));
     BinNums.Coq_xH],
   (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH)),
   (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))
    4:	(RTL.Iop ((Op.Ocmp (Op.Ccomp Integers.Ceq)),
   [(BinNums.Coq_xI BinNums.Coq_xH); (BinNums.Coq_xI BinNums.Coq_xH)],
   (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))),
   (BinNums.Coq_xI BinNums.Coq_xH)))
    3:	(RTL.Iop ((Op.Olea (Op.Aindexed2 BinNums.Z0)),
   [(BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH));
     (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))],
   (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH)),
   (BinNums.Coq_xO BinNums.Coq_xH)))
    2:	(RTL.Iop (Op.Osingleofint,
   [(BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))],
   (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)), BinNums.Coq_xH))
    1:	(RTL.Ireturn None)
}

test_condition() {
    3:	(RTL.Icond ((Op.Ccompuimm (Integers.Cne, BinNums.Z0)), [BinNums.Coq_xH],
   (BinNums.Coq_xO BinNums.Coq_xH), BinNums.Coq_xH))
    2:	(RTL.Iop ((Op.Ocmp (Op.Ccompimm (Integers.Ceq, BinNums.Z0))),
   [BinNums.Coq_xH], BinNums.Coq_xH, BinNums.Coq_xH))
    1:	(RTL.Ireturn None)
}

test_condition_complet() {
    4:	(RTL.Icond ((Op.Ccompuimm (Integers.Cne, BinNums.Z0)), [BinNums.Coq_xH],
   (BinNums.Coq_xO BinNums.Coq_xH), (BinNums.Coq_xI BinNums.Coq_xH)))
    3:	(RTL.Iop (
   (Op.Ointconst
      (BinNums.Zpos (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))),
   [], BinNums.Coq_xH, BinNums.Coq_xH))
    2:	(RTL.Iop ((Op.Ocmp (Op.Ccompimm (Integers.Ceq, BinNums.Z0))),
   [BinNums.Coq_xH], BinNums.Coq_xH, BinNums.Coq_xH))
    1:	(RTL.Ireturn None)
}

test_condition_complet_arg(x1) {
    4:	(RTL.Icond ((Op.Ccompuimm (Integers.Cne, BinNums.Z0)), [BinNums.Coq_xH],
   (BinNums.Coq_xO BinNums.Coq_xH), (BinNums.Coq_xI BinNums.Coq_xH)))
    3:	(RTL.Iop (
   (Op.Ointconst
      (BinNums.Zpos (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))),
   [], BinNums.Coq_xH, BinNums.Coq_xH))
    2:	(RTL.Iop ((Op.Ocmp (Op.Ccompimm (Integers.Ceq, BinNums.Z0))),
   [BinNums.Coq_xH], BinNums.Coq_xH, BinNums.Coq_xH))
    1:	(RTL.Ireturn None)
}

test_appel(x1) {
    2:	(RTL.Iop (Op.Ointofsingle, [BinNums.Coq_xH], (BinNums.Coq_xI BinNums.Coq_xH),
   BinNums.Coq_xH))
    1:	(RTL.Itailcall (
   { AST.sig_args = [AST.Tint]; sig_res = None;
     sig_cc =
     { AST.cc_vararg = false; cc_unproto = false; cc_structret = false } },
   (Datatypes.Coq_inr
      (BinNums.Coq_xO
         (BinNums.Coq_xO
            (BinNums.Coq_xO
               (BinNums.Coq_xO
                  (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))))),
   [(BinNums.Coq_xI BinNums.Coq_xH)]))
}

test_double_condition(x1) {
    7:	(RTL.Icond (
   (Op.Ccompimm (Integers.Clt,
      (BinNums.Zpos (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH))))),
   [BinNums.Coq_xH], (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)),
   (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))))
    6:	(RTL.Iop ((Op.Ointconst BinNums.Z0), [], (BinNums.Coq_xO BinNums.Coq_xH),
   (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))
    5:	(RTL.Iop (
   (Op.Ocmp (Op.Ccompimm (Integers.Cgt, (BinNums.Zpos BinNums.Coq_xH)))),
   [BinNums.Coq_xH], (BinNums.Coq_xO BinNums.Coq_xH),
   (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))
    4:	(RTL.Icond ((Op.Ccompuimm (Integers.Cne, BinNums.Z0)),
   [(BinNums.Coq_xO BinNums.Coq_xH)], (BinNums.Coq_xO BinNums.Coq_xH),
   (BinNums.Coq_xI BinNums.Coq_xH)))
    3:	(RTL.Iop ((Op.Ointconst (BinNums.Zpos (BinNums.Coq_xO BinNums.Coq_xH))), 
   [], (BinNums.Coq_xI BinNums.Coq_xH), BinNums.Coq_xH))
    2:	(RTL.Iop ((Op.Ointconst (BinNums.Zpos (BinNums.Coq_xI BinNums.Coq_xH))), 
   [], (BinNums.Coq_xI BinNums.Coq_xH), BinNums.Coq_xH))
    1:	(RTL.Ireturn None)
}

*)


let test = { AST.prog_defs =
  [((BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH)),
    (AST.Gfun
       (AST.External
          (AST.EF_builtin (
             ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'a'; 'i';
               's'; '_'; 'a'; 'n'; 'n'; 'o'; 't'],
             { AST.sig_args = [AST.Tlong]; sig_res = None;
               sig_cc =
               { AST.cc_vararg = true; cc_unproto = false;
                 cc_structret = false }
               }
             )))));
    ((BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'b'; 's';
                'w'; 'a'; 'p'],
              { AST.sig_args = [AST.Tint]; sig_res = (Some AST.Tint);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'b'; 's';
                'w'; 'a'; 'p'; '3'; '2'],
              { AST.sig_args = [AST.Tint]; sig_res = (Some AST.Tint);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'b'; 's';
                'w'; 'a'; 'p'; '1'; '6'],
              { AST.sig_args = [AST.Tint]; sig_res = (Some AST.Tint);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'f'; 'a';
                'b'; 's'],
              { AST.sig_args = [AST.Tfloat]; sig_res = (Some AST.Tfloat);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'f'; 's';
                'q'; 'r'; 't'],
              { AST.sig_args = [AST.Tfloat]; sig_res = (Some AST.Tfloat);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'm'; 'e';
                'm'; 'c'; 'p'; 'y'; '_'; 'a'; 'l'; 'i'; 'g'; 'n'; 'e'; 'd'],
              { AST.sig_args = [AST.Tlong; AST.Tlong; AST.Tlong; AST.Tlong];
                sig_res = None;
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'a'; 'n';
                'n'; 'o'; 't'],
              { AST.sig_args = [AST.Tlong]; sig_res = None;
                sig_cc =
                { AST.cc_vararg = true; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'a'; 'n';
                'n'; 'o'; 't'; '_'; 'i'; 'n'; 't'; 'v'; 'a'; 'l'],
              { AST.sig_args = [AST.Tlong; AST.Tint];
                sig_res = (Some AST.Tint);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'm'; 'e';
                'm'; 'b'; 'a'; 'r'],
              { AST.sig_args = []; sig_res = None;
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'v'; 'a';
                '_'; 's'; 't'; 'a'; 'r'; 't'],
              { AST.sig_args = [AST.Tlong]; sig_res = None;
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'v'; 'a';
                '_'; 'a'; 'r'; 'g'],
              { AST.sig_args = [AST.Tlong; AST.Tint]; sig_res = None;
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'v'; 'a';
                '_'; 'c'; 'o'; 'p'; 'y'],
              { AST.sig_args = [AST.Tlong; AST.Tlong]; sig_res = None;
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'v'; 'a';
                '_'; 'e'; 'n'; 'd'],
              { AST.sig_args = [AST.Tlong]; sig_res = None;
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))),
     (AST.Gfun
        (AST.External
           (AST.EF_external (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'v';
                'a'; '_'; 'i'; 'n'; 't'; '3'; '2'],
              { AST.sig_args = [AST.Tlong]; sig_res = (Some AST.Tint);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))),
     (AST.Gfun
        (AST.External
           (AST.EF_external (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'v';
                'a'; '_'; 'i'; 'n'; 't'; '6'; '4'],
              { AST.sig_args = [AST.Tlong]; sig_res = (Some AST.Tlong);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))),
     (AST.Gfun
        (AST.External
           (AST.EF_external (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'v';
                'a'; '_'; 'f'; 'l'; 'o'; 'a'; 't'; '6'; '4'],
              { AST.sig_args = [AST.Tlong]; sig_res = (Some AST.Tfloat);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH)))),
     (AST.Gfun
        (AST.External
           (AST.EF_external (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'v';
                'a'; '_'; 'c'; 'o'; 'm'; 'p'; 'o'; 's'; 'i'; 't'; 'e'],
              { AST.sig_args = [AST.Tlong; AST.Tlong];
                sig_res = (Some AST.Tlong);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH)))),
     (AST.Gfun
        (AST.External
           (AST.EF_runtime (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'i';
                '6'; '4'; '_'; 'd'; 't'; 'o'; 's'],
              { AST.sig_args = [AST.Tfloat]; sig_res = (Some AST.Tlong);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH)))),
     (AST.Gfun
        (AST.External
           (AST.EF_runtime (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'i';
                '6'; '4'; '_'; 'd'; 't'; 'o'; 'u'],
              { AST.sig_args = [AST.Tfloat]; sig_res = (Some AST.Tlong);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH)))),
     (AST.Gfun
        (AST.External
           (AST.EF_runtime (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'i';
                '6'; '4'; '_'; 's'; 't'; 'o'; 'd'],
              { AST.sig_args = [AST.Tlong]; sig_res = (Some AST.Tfloat);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH)))),
     (AST.Gfun
        (AST.External
           (AST.EF_runtime (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'i';
                '6'; '4'; '_'; 'u'; 't'; 'o'; 'd'],
              { AST.sig_args = [AST.Tlong]; sig_res = (Some AST.Tfloat);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH)))),
     (AST.Gfun
        (AST.External
           (AST.EF_runtime (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'i';
                '6'; '4'; '_'; 's'; 't'; 'o'; 'f'],
              { AST.sig_args = [AST.Tlong]; sig_res = (Some AST.Tsingle);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH)))),
     (AST.Gfun
        (AST.External
           (AST.EF_runtime (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'i';
                '6'; '4'; '_'; 'u'; 't'; 'o'; 'f'],
              { AST.sig_args = [AST.Tlong]; sig_res = (Some AST.Tsingle);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH)))),
     (AST.Gfun
        (AST.External
           (AST.EF_runtime (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'i';
                '6'; '4'; '_'; 's'; 'd'; 'i'; 'v'],
              { AST.sig_args = [AST.Tlong; AST.Tlong];
                sig_res = (Some AST.Tlong);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xO
           (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_runtime (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'i';
                '6'; '4'; '_'; 'u'; 'd'; 'i'; 'v'],
              { AST.sig_args = [AST.Tlong; AST.Tlong];
                sig_res = (Some AST.Tlong);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xO
           (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_runtime (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'i';
                '6'; '4'; '_'; 's'; 'm'; 'o'; 'd'],
              { AST.sig_args = [AST.Tlong; AST.Tlong];
                sig_res = (Some AST.Tlong);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xI
           (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_runtime (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'i';
                '6'; '4'; '_'; 'u'; 'm'; 'o'; 'd'],
              { AST.sig_args = [AST.Tlong; AST.Tlong];
                sig_res = (Some AST.Tlong);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xI
           (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_runtime (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'i';
                '6'; '4'; '_'; 's'; 'h'; 'l'],
              { AST.sig_args = [AST.Tlong; AST.Tint];
                sig_res = (Some AST.Tlong);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xO
           (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_runtime (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'i';
                '6'; '4'; '_'; 's'; 'h'; 'r'],
              { AST.sig_args = [AST.Tlong; AST.Tint];
                sig_res = (Some AST.Tlong);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xO
           (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_runtime (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'i';
                '6'; '4'; '_'; 's'; 'a'; 'r'],
              { AST.sig_args = [AST.Tlong; AST.Tint];
                sig_res = (Some AST.Tlong);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xI
           (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_runtime (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'i';
                '6'; '4'; '_'; 's'; 'm'; 'u'; 'l'; 'h'],
              { AST.sig_args = [AST.Tlong; AST.Tlong];
                sig_res = (Some AST.Tlong);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xI
           (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_runtime (
              ['_'; '_'; 'c'; 'o'; 'm'; 'p'; 'c'; 'e'; 'r'; 't'; '_'; 'i';
                '6'; '4'; '_'; 'u'; 'm'; 'u'; 'l'; 'h'],
              { AST.sig_args = [AST.Tlong; AST.Tlong];
                sig_res = (Some AST.Tlong);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xO
           (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'b'; 's';
                'w'; 'a'; 'p'; '6'; '4'],
              { AST.sig_args = [AST.Tlong]; sig_res = (Some AST.Tlong);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xO
           (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'c'; 'l';
                'z'],
              { AST.sig_args = [AST.Tint]; sig_res = (Some AST.Tint);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xI
           (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'c'; 'l';
                'z'; 'l'],
              { AST.sig_args = [AST.Tlong]; sig_res = (Some AST.Tint);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xI
           (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'c'; 'l';
                'z'; 'l'; 'l'],
              { AST.sig_args = [AST.Tlong]; sig_res = (Some AST.Tint);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xO
           (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'c'; 't';
                'z'],
              { AST.sig_args = [AST.Tint]; sig_res = (Some AST.Tint);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xO
           (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'c'; 't';
                'z'; 'l'],
              { AST.sig_args = [AST.Tlong]; sig_res = (Some AST.Tint);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xI
           (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'c'; 't';
                'z'; 'l'; 'l'],
              { AST.sig_args = [AST.Tlong]; sig_res = (Some AST.Tint);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xI
           (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'f'; 'm';
                'a'; 'x'],
              { AST.sig_args = [AST.Tfloat; AST.Tfloat];
                sig_res = (Some AST.Tfloat);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xO
           (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'f'; 'm';
                'i'; 'n'],
              { AST.sig_args = [AST.Tfloat; AST.Tfloat];
                sig_res = (Some AST.Tfloat);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xO
           (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'f'; 'm';
                'a'; 'd'; 'd'],
              { AST.sig_args = [AST.Tfloat; AST.Tfloat; AST.Tfloat];
                sig_res = (Some AST.Tfloat);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xI
           (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'f'; 'm';
                's'; 'u'; 'b'],
              { AST.sig_args = [AST.Tfloat; AST.Tfloat; AST.Tfloat];
                sig_res = (Some AST.Tfloat);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xI
           (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'f'; 'n';
                'm'; 'a'; 'd'; 'd'],
              { AST.sig_args = [AST.Tfloat; AST.Tfloat; AST.Tfloat];
                sig_res = (Some AST.Tfloat);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xO
           (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'f'; 'n';
                'm'; 's'; 'u'; 'b'],
              { AST.sig_args = [AST.Tfloat; AST.Tfloat; AST.Tfloat];
                sig_res = (Some AST.Tfloat);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xO
           (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'r'; 'e';
                'a'; 'd'; '1'; '6'; '_'; 'r'; 'e'; 'v'; 'e'; 'r'; 's'; 'e';
                'd'],
              { AST.sig_args = [AST.Tlong]; sig_res = (Some AST.Tint);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xI
           (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'r'; 'e';
                'a'; 'd'; '3'; '2'; '_'; 'r'; 'e'; 'v'; 'e'; 'r'; 's'; 'e';
                'd'],
              { AST.sig_args = [AST.Tlong]; sig_res = (Some AST.Tint);
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xI
           (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'w'; 'r';
                'i'; 't'; 'e'; '1'; '6'; '_'; 'r'; 'e'; 'v'; 'e'; 'r'; 's';
                'e'; 'd'],
              { AST.sig_args = [AST.Tlong; AST.Tint]; sig_res = None;
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xO
           (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'w'; 'r';
                'i'; 't'; 'e'; '3'; '2'; '_'; 'r'; 'e'; 'v'; 'e'; 'r'; 's';
                'e'; 'd'],
              { AST.sig_args = [AST.Tlong; AST.Tint]; sig_res = None;
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xI
        (BinNums.Coq_xO
           (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_builtin (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'n'; 'o';
                'p'],
              { AST.sig_args = []; sig_res = None;
                sig_cc =
                { AST.cc_vararg = false; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xI
           (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.External
           (AST.EF_external (
              ['_'; '_'; 'b'; 'u'; 'i'; 'l'; 't'; 'i'; 'n'; '_'; 'd'; 'e';
                'b'; 'u'; 'g'],
              { AST.sig_args = [AST.Tint]; sig_res = None;
                sig_cc =
                { AST.cc_vararg = true; cc_unproto = false;
                  cc_structret = false }
                }
              )))));
    ((BinNums.Coq_xO
        (BinNums.Coq_xO
           (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.Internal
           { RTL.fn_sig =
             { AST.sig_args = [AST.Tsingle]; sig_res = None;
               sig_cc =
               { AST.cc_vararg = false; cc_unproto = false;
                 cc_structret = false }
               };
             fn_params = [BinNums.Coq_xH]; fn_stacksize = BinNums.Z0;
             fn_code =
             (Maps.PTree.Node (
                (Maps.PTree.Node (Maps.PTree.Leaf,
                   (Some (RTL.Iop (
                            (Op.Osingleconst
                               (Fappli_IEEE.B754_finite (false,
                                  (BinNums.Coq_xO
                                     (BinNums.Coq_xO
                                        (BinNums.Coq_xO
                                           (BinNums.Coq_xO
                                              (BinNums.Coq_xO
                                                 (BinNums.Coq_xO
                                                    (BinNums.Coq_xO
                                                       (BinNums.Coq_xO
                                                          (BinNums.Coq_xO
                                                             (BinNums.Coq_xO
                                                                (BinNums.Coq_xO
                                                                   (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    BinNums.Coq_xH))))))))))))))))))))))),
                                  (BinNums.Zneg
                                     (BinNums.Coq_xI
                                        (BinNums.Coq_xO
                                           (BinNums.Coq_xI
                                              (BinNums.Coq_xO BinNums.Coq_xH)))))
                                  ))),
                            [], BinNums.Coq_xH, BinNums.Coq_xH))),
                   Maps.PTree.Leaf)),
                (Some (RTL.Ireturn None)),
                (Maps.PTree.Node (Maps.PTree.Leaf,
                   (Some (RTL.Iop (
                            (Op.Osingleconst
                               (Fappli_IEEE.B754_finite (false,
                                  (BinNums.Coq_xO
                                     (BinNums.Coq_xO
                                        (BinNums.Coq_xO
                                           (BinNums.Coq_xO
                                              (BinNums.Coq_xO
                                                 (BinNums.Coq_xO
                                                    (BinNums.Coq_xO
                                                       (BinNums.Coq_xO
                                                          (BinNums.Coq_xO
                                                             (BinNums.Coq_xO
                                                                (BinNums.Coq_xO
                                                                   (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    (BinNums.Coq_xO
                                                                    BinNums.Coq_xH))))))))))))))))))))))),
                                  (BinNums.Zneg
                                     (BinNums.Coq_xI
                                        (BinNums.Coq_xI
                                           (BinNums.Coq_xI
                                              (BinNums.Coq_xO BinNums.Coq_xH)))))
                                  ))),
                            [], BinNums.Coq_xH,
                            (BinNums.Coq_xO BinNums.Coq_xH)))),
                   Maps.PTree.Leaf))
                ));
             fn_entrypoint = (BinNums.Coq_xI BinNums.Coq_xH) })));
    ((BinNums.Coq_xO
        (BinNums.Coq_xI
           (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.Internal
           { RTL.fn_sig =
             { AST.sig_args = [AST.Tint]; sig_res = None;
               sig_cc =
               { AST.cc_vararg = false; cc_unproto = false;
                 cc_structret = false }
               };
             fn_params = [BinNums.Coq_xH]; fn_stacksize = BinNums.Z0;
             fn_code =
             (Maps.PTree.Node (
                (Maps.PTree.Node (
                   (Maps.PTree.Node (
                      (Maps.PTree.Node (Maps.PTree.Leaf,
                         (Some (RTL.Iop (
                                  (Op.Ocmp
                                     (Op.Ccompimm (Integers.Cgt, BinNums.Z0))),
                                  [BinNums.Coq_xH],
                                  (BinNums.Coq_xO BinNums.Coq_xH),
                                  (BinNums.Coq_xI
                                     (BinNums.Coq_xI BinNums.Coq_xH))
                                  ))),
                         Maps.PTree.Leaf)),
                      (Some (RTL.Icond (
                               (Op.Ccompuimm (Integers.Cne, BinNums.Z0)),
                               [(BinNums.Coq_xI BinNums.Coq_xH)],
                               (BinNums.Coq_xO BinNums.Coq_xH),
                               (BinNums.Coq_xI BinNums.Coq_xH)))),
                      Maps.PTree.Leaf)),
                   (Some (RTL.Iop ((Op.Ocmp (Op.Ccomp Integers.Ceq)),
                            [BinNums.Coq_xH; BinNums.Coq_xH],
                            (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)),
                            BinNums.Coq_xH))),
                   (Maps.PTree.Node (
                      (Maps.PTree.Node (Maps.PTree.Leaf,
                         (Some (RTL.Icond (
                                  (Op.Ccompimm (Integers.Clt,
                                     (BinNums.Zpos
                                        (BinNums.Coq_xI
                                           (BinNums.Coq_xO BinNums.Coq_xH)))
                                     )),
                                  [(BinNums.Coq_xO
                                      (BinNums.Coq_xI BinNums.Coq_xH))
                                    ],
                                  (BinNums.Coq_xO
                                     (BinNums.Coq_xO
                                        (BinNums.Coq_xO BinNums.Coq_xH))),
                                  (BinNums.Coq_xI
                                     (BinNums.Coq_xO
                                        (BinNums.Coq_xO BinNums.Coq_xH)))
                                  ))),
                         Maps.PTree.Leaf)),
                      (Some (RTL.Iop ((Op.Ointconst BinNums.Z0), [],
                               (BinNums.Coq_xI BinNums.Coq_xH),
                               (BinNums.Coq_xO
                                  (BinNums.Coq_xO BinNums.Coq_xH))
                               ))),
                      Maps.PTree.Leaf))
                   )),
                (Some (RTL.Ireturn None)),
                (Maps.PTree.Node (
                   (Maps.PTree.Node (
                      (Maps.PTree.Node (Maps.PTree.Leaf,
                         (Some (RTL.Iop ((Op.Ointconst BinNums.Z0), [],
                                  (BinNums.Coq_xO BinNums.Coq_xH),
                                  (BinNums.Coq_xI
                                     (BinNums.Coq_xI BinNums.Coq_xH))
                                  ))),
                         Maps.PTree.Leaf)),
                      (Some (RTL.Iop (
                               (Op.Ocmp
                                  (Op.Ccompimm (Integers.Cgt,
                                     (BinNums.Zpos BinNums.Coq_xH)))),
                               [BinNums.Coq_xH],
                               (BinNums.Coq_xI BinNums.Coq_xH),
                               (BinNums.Coq_xO
                                  (BinNums.Coq_xO BinNums.Coq_xH))
                               ))),
                      Maps.PTree.Leaf)),
                   (Some (RTL.Iop (
                            (Op.Ointconst
                               (BinNums.Zpos
                                  (BinNums.Coq_xI
                                     (BinNums.Coq_xO BinNums.Coq_xH)))),
                            [],
                            (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)),
                            BinNums.Coq_xH))),
                   (Maps.PTree.Node (
                      (Maps.PTree.Node (Maps.PTree.Leaf,
                         (Some (RTL.Iop (
                                  (Op.Olea
                                     (Op.Aindexed
                                        (BinNums.Zpos
                                           (BinNums.Coq_xI BinNums.Coq_xH)))),
                                  [BinNums.Coq_xH],
                                  (BinNums.Coq_xO
                                     (BinNums.Coq_xI BinNums.Coq_xH)),
                                  (BinNums.Coq_xO
                                     (BinNums.Coq_xI
                                        (BinNums.Coq_xO BinNums.Coq_xH)))
                                  ))),
                         Maps.PTree.Leaf)),
                      (Some (RTL.Icond (
                               (Op.Ccompuimm (Integers.Cne, BinNums.Z0)),
                               [(BinNums.Coq_xO BinNums.Coq_xH)],
                               (BinNums.Coq_xI
                                  (BinNums.Coq_xO BinNums.Coq_xH)),
                               (BinNums.Coq_xO
                                  (BinNums.Coq_xI BinNums.Coq_xH))
                               ))),
                      Maps.PTree.Leaf))
                   ))
                ));
             fn_entrypoint =
             (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))
             })));
    ((BinNums.Coq_xI
        (BinNums.Coq_xI
           (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH))))),
     (AST.Gfun
        (AST.Internal
           { RTL.fn_sig =
             { AST.sig_args = [AST.Tint]; sig_res = None;
               sig_cc =
               { AST.cc_vararg = false; cc_unproto = false;
                 cc_structret = false }
               };
             fn_params = [BinNums.Coq_xH]; fn_stacksize = BinNums.Z0;
             fn_code =
             (Maps.PTree.Node (
                (Maps.PTree.Node (
                   (Maps.PTree.Node (Maps.PTree.Leaf,
                      (Some (RTL.Icond (
                               (Op.Ccompimm (Integers.Cgt,
                                  (BinNums.Zpos
                                     (BinNums.Coq_xO BinNums.Coq_xH))
                                  )),
                               [BinNums.Coq_xH],
                               (BinNums.Coq_xO BinNums.Coq_xH),
                               (BinNums.Coq_xI BinNums.Coq_xH)))),
                      Maps.PTree.Leaf)),
                   (Some (RTL.Iop ((Op.Ocmp (Op.Ccomp Integers.Ceq)),
                            [BinNums.Coq_xH; BinNums.Coq_xH],
                            (BinNums.Coq_xO BinNums.Coq_xH), BinNums.Coq_xH))),
                   Maps.PTree.Leaf)),
                (Some (RTL.Ireturn None)),
                (Maps.PTree.Node (Maps.PTree.Leaf,
                   (Some (RTL.Iop (
                            (Op.Ointconst
                               (BinNums.Zpos
                                  (BinNums.Coq_xO
                                     (BinNums.Coq_xO BinNums.Coq_xH)))),
                            [], (BinNums.Coq_xO BinNums.Coq_xH),
                            BinNums.Coq_xH))),
                   Maps.PTree.Leaf))
                ));
             fn_entrypoint = (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))
             })));
    ((BinNums.Coq_xO
        (BinNums.Coq_xO
           (BinNums.Coq_xO
              (BinNums.Coq_xO
                 (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))))),
     (AST.Gfun
        (AST.Internal
           { RTL.fn_sig =
             { AST.sig_args = [AST.Tint]; sig_res = None;
               sig_cc =
               { AST.cc_vararg = false; cc_unproto = false;
                 cc_structret = false }
               };
             fn_params = [BinNums.Coq_xH]; fn_stacksize = BinNums.Z0;
             fn_code =
             (Maps.PTree.Node (
                (Maps.PTree.Node (Maps.PTree.Leaf,
                   (Some (RTL.Iop (
                            (Op.Olea
                               (Op.Ascaled (
                                  (BinNums.Zpos
                                     (BinNums.Coq_xO
                                        (BinNums.Coq_xO BinNums.Coq_xH))),
                                  BinNums.Z0))),
                            [BinNums.Coq_xH],
                            (BinNums.Coq_xO BinNums.Coq_xH), BinNums.Coq_xH))),
                   Maps.PTree.Leaf)),
                (Some (RTL.Ireturn None)), Maps.PTree.Leaf));
             fn_entrypoint = (BinNums.Coq_xO BinNums.Coq_xH) })));
    ((BinNums.Coq_xI
        (BinNums.Coq_xI
           (BinNums.Coq_xO
              (BinNums.Coq_xO
                 (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))))),
     (AST.Gfun
        (AST.Internal
           { RTL.fn_sig =
             { AST.sig_args = [AST.Tint; AST.Tlong]; sig_res = None;
               sig_cc =
               { AST.cc_vararg = false; cc_unproto = false;
                 cc_structret = false }
               };
             fn_params = [(BinNums.Coq_xO BinNums.Coq_xH); BinNums.Coq_xH];
             fn_stacksize = BinNums.Z0;
             fn_code =
             (Maps.PTree.Node (
                (Maps.PTree.Node (
                   (Maps.PTree.Node (Maps.PTree.Leaf,
                      (Some (RTL.Iop (Op.Ocast32signed,
                               [(BinNums.Coq_xO BinNums.Coq_xH)],
                               (BinNums.Coq_xO
                                  (BinNums.Coq_xO BinNums.Coq_xH)),
                               (BinNums.Coq_xI BinNums.Coq_xH)))),
                      Maps.PTree.Leaf)),
                   (Some (RTL.Istore (AST.Mint32,
                            (Op.Aindexed2scaled (
                               (BinNums.Zpos
                                  (BinNums.Coq_xO
                                     (BinNums.Coq_xO BinNums.Coq_xH))),
                               BinNums.Z0)),
                            [BinNums.Coq_xH;
                              (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))
                              ],
                            (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)),
                            BinNums.Coq_xH))),
                   Maps.PTree.Leaf)),
                (Some (RTL.Ireturn None)),
                (Maps.PTree.Node (Maps.PTree.Leaf,
                   (Some (RTL.Iop ((Op.Ointconst BinNums.Z0), [],
                            (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)),
                            (BinNums.Coq_xO BinNums.Coq_xH)))),
                   Maps.PTree.Leaf))
                ));
             fn_entrypoint = (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))
             })));
    ((BinNums.Coq_xI
        (BinNums.Coq_xI
           (BinNums.Coq_xI
              (BinNums.Coq_xO
                 (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))))),
     (AST.Gfun
        (AST.Internal
           { RTL.fn_sig =
             { AST.sig_args = [AST.Tint; AST.Tint; AST.Tsingle];
               sig_res = None;
               sig_cc =
               { AST.cc_vararg = false; cc_unproto = false;
                 cc_structret = false }
               };
             fn_params =
             [(BinNums.Coq_xI BinNums.Coq_xH);
               (BinNums.Coq_xO BinNums.Coq_xH); BinNums.Coq_xH];
             fn_stacksize =
             (BinNums.Zpos
                (BinNums.Coq_xO
                   (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))));
             fn_code =
             (Maps.PTree.Node (
                (Maps.PTree.Node (
                   (Maps.PTree.Node (Maps.PTree.Leaf,
                      (Some (RTL.Istore (AST.Mint32,
                               (Op.Ainstack BinNums.Z0), [],
                               (BinNums.Coq_xO BinNums.Coq_xH),
                               (BinNums.Coq_xI BinNums.Coq_xH)))),
                      Maps.PTree.Leaf)),
                   (Some (RTL.Istore (AST.Mint32,
                            (Op.Ainstack
                               (BinNums.Zpos
                                  (BinNums.Coq_xO
                                     (BinNums.Coq_xO
                                        (BinNums.Coq_xO BinNums.Coq_xH))))),
                            [], (BinNums.Coq_xI BinNums.Coq_xH),
                            BinNums.Coq_xH))),
                   Maps.PTree.Leaf)),
                (Some (RTL.Ireturn None)),
                (Maps.PTree.Node (Maps.PTree.Leaf,
                   (Some (RTL.Istore (AST.Mfloat32,
                            (Op.Ainstack
                               (BinNums.Zpos
                                  (BinNums.Coq_xO
                                     (BinNums.Coq_xO BinNums.Coq_xH)))),
                            [], BinNums.Coq_xH,
                            (BinNums.Coq_xO BinNums.Coq_xH)))),
                   Maps.PTree.Leaf))
                ));
             fn_entrypoint = (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))
             })));
    ((BinNums.Coq_xO
        (BinNums.Coq_xI
           (BinNums.Coq_xO
              (BinNums.Coq_xI
                 (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))))),
     (AST.Gfun
        (AST.Internal
           { RTL.fn_sig =
             { AST.sig_args = [AST.Tint; AST.Tint; AST.Tint]; sig_res = None;
               sig_cc =
               { AST.cc_vararg = false; cc_unproto = false;
                 cc_structret = false }
               };
             fn_params =
             [(BinNums.Coq_xI BinNums.Coq_xH);
               (BinNums.Coq_xO BinNums.Coq_xH); BinNums.Coq_xH];
             fn_stacksize = BinNums.Z0;
             fn_code =
             (Maps.PTree.Node (
                (Maps.PTree.Node (
                   (Maps.PTree.Node (Maps.PTree.Leaf,
                      (Some (RTL.Iop ((Op.Ocmp (Op.Ccomp Integers.Ceq)),
                               [(BinNums.Coq_xI BinNums.Coq_xH);
                                 (BinNums.Coq_xI BinNums.Coq_xH)],
                               (BinNums.Coq_xO
                                  (BinNums.Coq_xO
                                     (BinNums.Coq_xO BinNums.Coq_xH))),
                               (BinNums.Coq_xI BinNums.Coq_xH)))),
                      Maps.PTree.Leaf)),
                   (Some (RTL.Iop (Op.Osingleofint,
                            [(BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))
                              ],
                            (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)),
                            BinNums.Coq_xH))),
                   (Maps.PTree.Node (Maps.PTree.Leaf,
                      (Some (RTL.Iop ((Op.Olea (Op.Aindexed2 BinNums.Z0)),
                               [(BinNums.Coq_xI BinNums.Coq_xH);
                                 (BinNums.Coq_xO BinNums.Coq_xH)],
                               (BinNums.Coq_xI
                                  (BinNums.Coq_xO
                                     (BinNums.Coq_xO BinNums.Coq_xH))),
                               (BinNums.Coq_xI
                                  (BinNums.Coq_xO BinNums.Coq_xH))
                               ))),
                      Maps.PTree.Leaf))
                   )),
                (Some (RTL.Ireturn None)),
                (Maps.PTree.Node (
                   (Maps.PTree.Node (Maps.PTree.Leaf,
                      (Some (RTL.Iop (
                               (Op.Olea
                                  (Op.Aindexed2scaled (
                                     (BinNums.Zpos
                                        (BinNums.Coq_xO BinNums.Coq_xH)),
                                     BinNums.Z0))),
                               [(BinNums.Coq_xI
                                   (BinNums.Coq_xO
                                      (BinNums.Coq_xO BinNums.Coq_xH)));
                                 BinNums.Coq_xH],
                               (BinNums.Coq_xI
                                  (BinNums.Coq_xI BinNums.Coq_xH)),
                               (BinNums.Coq_xO
                                  (BinNums.Coq_xO BinNums.Coq_xH))
                               ))),
                      Maps.PTree.Leaf)),
                   (Some (RTL.Iop ((Op.Olea (Op.Aindexed2 BinNums.Z0)),
                            [(BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH));
                              (BinNums.Coq_xO
                                 (BinNums.Coq_xO
                                    (BinNums.Coq_xO BinNums.Coq_xH)))
                              ],
                            (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH)),
                            (BinNums.Coq_xO BinNums.Coq_xH)))),
                   Maps.PTree.Leaf))
                ));
             fn_entrypoint = (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))
             })));
    ((BinNums.Coq_xI
        (BinNums.Coq_xI
           (BinNums.Coq_xO
              (BinNums.Coq_xI
                 (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))))),
     (AST.Gfun
        (AST.Internal
           { RTL.fn_sig =
             { AST.sig_args = []; sig_res = None;
               sig_cc =
               { AST.cc_vararg = false; cc_unproto = false;
                 cc_structret = false }
               };
             fn_params = []; fn_stacksize = BinNums.Z0;
             fn_code =
             (Maps.PTree.Node (
                (Maps.PTree.Node (Maps.PTree.Leaf,
                   (Some (RTL.Iop (
                            (Op.Ocmp (Op.Ccompimm (Integers.Ceq, BinNums.Z0))),
                            [BinNums.Coq_xH], BinNums.Coq_xH, BinNums.Coq_xH
                            ))),
                   Maps.PTree.Leaf)),
                (Some (RTL.Ireturn None)),
                (Maps.PTree.Node (Maps.PTree.Leaf,
                   (Some (RTL.Icond (
                            (Op.Ccompuimm (Integers.Cne, BinNums.Z0)),
                            [BinNums.Coq_xH],
                            (BinNums.Coq_xO BinNums.Coq_xH), BinNums.Coq_xH))),
                   Maps.PTree.Leaf))
                ));
             fn_entrypoint = (BinNums.Coq_xI BinNums.Coq_xH) })));
    ((BinNums.Coq_xO
        (BinNums.Coq_xO
           (BinNums.Coq_xI
              (BinNums.Coq_xI
                 (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))))),
     (AST.Gfun
        (AST.Internal
           { RTL.fn_sig =
             { AST.sig_args = []; sig_res = None;
               sig_cc =
               { AST.cc_vararg = false; cc_unproto = false;
                 cc_structret = false }
               };
             fn_params = []; fn_stacksize = BinNums.Z0;
             fn_code =
             (Maps.PTree.Node (
                (Maps.PTree.Node (
                   (Maps.PTree.Node (Maps.PTree.Leaf,
                      (Some (RTL.Icond (
                               (Op.Ccompuimm (Integers.Cne, BinNums.Z0)),
                               [BinNums.Coq_xH],
                               (BinNums.Coq_xO BinNums.Coq_xH),
                               (BinNums.Coq_xI BinNums.Coq_xH)))),
                      Maps.PTree.Leaf)),
                   (Some (RTL.Iop (
                            (Op.Ocmp (Op.Ccompimm (Integers.Ceq, BinNums.Z0))),
                            [BinNums.Coq_xH], BinNums.Coq_xH, BinNums.Coq_xH
                            ))),
                   Maps.PTree.Leaf)),
                (Some (RTL.Ireturn None)),
                (Maps.PTree.Node (Maps.PTree.Leaf,
                   (Some (RTL.Iop (
                            (Op.Ointconst
                               (BinNums.Zpos
                                  (BinNums.Coq_xI
                                     (BinNums.Coq_xO BinNums.Coq_xH)))),
                            [], BinNums.Coq_xH, BinNums.Coq_xH))),
                   Maps.PTree.Leaf))
                ));
             fn_entrypoint = (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))
             })));
    ((BinNums.Coq_xI
        (BinNums.Coq_xO
           (BinNums.Coq_xI
              (BinNums.Coq_xI
                 (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))))),
     (AST.Gfun
        (AST.Internal
           { RTL.fn_sig =
             { AST.sig_args = [AST.Tint]; sig_res = None;
               sig_cc =
               { AST.cc_vararg = false; cc_unproto = false;
                 cc_structret = false }
               };
             fn_params = [BinNums.Coq_xH]; fn_stacksize = BinNums.Z0;
             fn_code =
             (Maps.PTree.Node (
                (Maps.PTree.Node (
                   (Maps.PTree.Node (Maps.PTree.Leaf,
                      (Some (RTL.Icond (
                               (Op.Ccompuimm (Integers.Cne, BinNums.Z0)),
                               [BinNums.Coq_xH],
                               (BinNums.Coq_xO BinNums.Coq_xH),
                               (BinNums.Coq_xI BinNums.Coq_xH)))),
                      Maps.PTree.Leaf)),
                   (Some (RTL.Iop (
                            (Op.Ocmp (Op.Ccompimm (Integers.Ceq, BinNums.Z0))),
                            [BinNums.Coq_xH], BinNums.Coq_xH, BinNums.Coq_xH
                            ))),
                   Maps.PTree.Leaf)),
                (Some (RTL.Ireturn None)),
                (Maps.PTree.Node (Maps.PTree.Leaf,
                   (Some (RTL.Iop (
                            (Op.Ointconst
                               (BinNums.Zpos
                                  (BinNums.Coq_xI
                                     (BinNums.Coq_xO BinNums.Coq_xH)))),
                            [], BinNums.Coq_xH, BinNums.Coq_xH))),
                   Maps.PTree.Leaf))
                ));
             fn_entrypoint = (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))
             })));
    ((BinNums.Coq_xO
        (BinNums.Coq_xI
           (BinNums.Coq_xI
              (BinNums.Coq_xI
                 (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))))),
     (AST.Gfun
        (AST.Internal
           { RTL.fn_sig =
             { AST.sig_args = [AST.Tsingle]; sig_res = None;
               sig_cc =
               { AST.cc_vararg = false; cc_unproto = false;
                 cc_structret = false }
               };
             fn_params = [BinNums.Coq_xH]; fn_stacksize = BinNums.Z0;
             fn_code =
             (Maps.PTree.Node (
                (Maps.PTree.Node (Maps.PTree.Leaf,
                   (Some (RTL.Iop (Op.Ointofsingle, [BinNums.Coq_xH],
                            (BinNums.Coq_xI BinNums.Coq_xH), BinNums.Coq_xH))),
                   Maps.PTree.Leaf)),
                (Some (RTL.Itailcall (
                         { AST.sig_args = [AST.Tint]; sig_res = None;
                           sig_cc =
                           { AST.cc_vararg = false; cc_unproto = false;
                             cc_structret = false }
                           },
                         (Datatypes.Coq_inr
                            (BinNums.Coq_xO
                               (BinNums.Coq_xO
                                  (BinNums.Coq_xO
                                     (BinNums.Coq_xO
                                        (BinNums.Coq_xO
                                           (BinNums.Coq_xO BinNums.Coq_xH))))))),
                         [(BinNums.Coq_xI BinNums.Coq_xH)]))),
                Maps.PTree.Leaf));
             fn_entrypoint = (BinNums.Coq_xO BinNums.Coq_xH) })));
    ((BinNums.Coq_xI
        (BinNums.Coq_xI
           (BinNums.Coq_xI
              (BinNums.Coq_xI
                 (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))))),
     (AST.Gfun
        (AST.Internal
           { RTL.fn_sig =
             { AST.sig_args = [AST.Tint]; sig_res = None;
               sig_cc =
               { AST.cc_vararg = false; cc_unproto = false;
                 cc_structret = false }
               };
             fn_params = [BinNums.Coq_xH]; fn_stacksize = BinNums.Z0;
             fn_code =
             (Maps.PTree.Node (
                (Maps.PTree.Node (
                   (Maps.PTree.Node (Maps.PTree.Leaf,
                      (Some (RTL.Icond (
                               (Op.Ccompuimm (Integers.Cne, BinNums.Z0)),
                               [(BinNums.Coq_xO BinNums.Coq_xH)],
                               (BinNums.Coq_xO BinNums.Coq_xH),
                               (BinNums.Coq_xI BinNums.Coq_xH)))),
                      Maps.PTree.Leaf)),
                   (Some (RTL.Iop (
                            (Op.Ointconst
                               (BinNums.Zpos (BinNums.Coq_xI BinNums.Coq_xH))),
                            [], (BinNums.Coq_xI BinNums.Coq_xH),
                            BinNums.Coq_xH))),
                   (Maps.PTree.Node (Maps.PTree.Leaf,
                      (Some (RTL.Iop ((Op.Ointconst BinNums.Z0), [],
                               (BinNums.Coq_xO BinNums.Coq_xH),
                               (BinNums.Coq_xO
                                  (BinNums.Coq_xO BinNums.Coq_xH))
                               ))),
                      Maps.PTree.Leaf))
                   )),
                (Some (RTL.Ireturn None)),
                (Maps.PTree.Node (
                   (Maps.PTree.Node (Maps.PTree.Leaf,
                      (Some (RTL.Iop (
                               (Op.Ocmp
                                  (Op.Ccompimm (Integers.Cgt,
                                     (BinNums.Zpos BinNums.Coq_xH)))),
                               [BinNums.Coq_xH],
                               (BinNums.Coq_xO BinNums.Coq_xH),
                               (BinNums.Coq_xO
                                  (BinNums.Coq_xO BinNums.Coq_xH))
                               ))),
                      Maps.PTree.Leaf)),
                   (Some (RTL.Iop (
                            (Op.Ointconst
                               (BinNums.Zpos (BinNums.Coq_xO BinNums.Coq_xH))),
                            [], (BinNums.Coq_xI BinNums.Coq_xH),
                            BinNums.Coq_xH))),
                   (Maps.PTree.Node (Maps.PTree.Leaf,
                      (Some (RTL.Icond (
                               (Op.Ccompimm (Integers.Clt,
                                  (BinNums.Zpos
                                     (BinNums.Coq_xI
                                        (BinNums.Coq_xO BinNums.Coq_xH)))
                                  )),
                               [BinNums.Coq_xH],
                               (BinNums.Coq_xI
                                  (BinNums.Coq_xO BinNums.Coq_xH)),
                               (BinNums.Coq_xO
                                  (BinNums.Coq_xI BinNums.Coq_xH))
                               ))),
                      Maps.PTree.Leaf))
                   ))
                ));
             fn_entrypoint = (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH))
             })))
    ];
  prog_public =
  [(BinNums.Coq_xI
      (BinNums.Coq_xI
         (BinNums.Coq_xI
            (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))));
    (BinNums.Coq_xO
       (BinNums.Coq_xI
          (BinNums.Coq_xI
             (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))));
    (BinNums.Coq_xI
       (BinNums.Coq_xO
          (BinNums.Coq_xI
             (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))));
    (BinNums.Coq_xO
       (BinNums.Coq_xO
          (BinNums.Coq_xI
             (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))));
    (BinNums.Coq_xI
       (BinNums.Coq_xI
          (BinNums.Coq_xO
             (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))));
    (BinNums.Coq_xO
       (BinNums.Coq_xI
          (BinNums.Coq_xO
             (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))));
    (BinNums.Coq_xI
       (BinNums.Coq_xI
          (BinNums.Coq_xI
             (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))));
    (BinNums.Coq_xI
       (BinNums.Coq_xI
          (BinNums.Coq_xO
             (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))));
    (BinNums.Coq_xO
       (BinNums.Coq_xO
          (BinNums.Coq_xO
             (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))))));
    (BinNums.Coq_xI
       (BinNums.Coq_xI
          (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH)))));
    (BinNums.Coq_xO
       (BinNums.Coq_xI
          (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH)))));
    (BinNums.Coq_xO
       (BinNums.Coq_xO
          (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH)))));
    (BinNums.Coq_xO
       (BinNums.Coq_xI
          (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH)))));
    (BinNums.Coq_xI
       (BinNums.Coq_xO
          (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH)))));
    (BinNums.Coq_xO
       (BinNums.Coq_xO
          (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH)))));
    (BinNums.Coq_xI
       (BinNums.Coq_xI
          (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH)))));
    (BinNums.Coq_xO
       (BinNums.Coq_xI
          (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH)))));
    (BinNums.Coq_xI
       (BinNums.Coq_xO
          (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH)))));
    (BinNums.Coq_xO
       (BinNums.Coq_xO
          (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH)))));
    (BinNums.Coq_xI
       (BinNums.Coq_xI
          (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH)))));
    (BinNums.Coq_xO
       (BinNums.Coq_xI
          (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH)))));
    (BinNums.Coq_xI
       (BinNums.Coq_xO
          (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH)))));
    (BinNums.Coq_xO
       (BinNums.Coq_xO
          (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH)))));
    (BinNums.Coq_xI
       (BinNums.Coq_xI
          (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))));
    (BinNums.Coq_xO
       (BinNums.Coq_xI
          (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))));
    (BinNums.Coq_xI
       (BinNums.Coq_xO
          (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))));
    (BinNums.Coq_xO
       (BinNums.Coq_xO
          (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))));
    (BinNums.Coq_xI
       (BinNums.Coq_xI
          (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))));
    (BinNums.Coq_xO
       (BinNums.Coq_xI
          (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))));
    (BinNums.Coq_xI
       (BinNums.Coq_xO
          (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))));
    (BinNums.Coq_xO
       (BinNums.Coq_xO
          (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)))));
    (BinNums.Coq_xI
       (BinNums.Coq_xI
          (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))));
    (BinNums.Coq_xO
       (BinNums.Coq_xI
          (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))));
    (BinNums.Coq_xI
       (BinNums.Coq_xO
          (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))));
    (BinNums.Coq_xO
       (BinNums.Coq_xO
          (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))));
    (BinNums.Coq_xI
       (BinNums.Coq_xI
          (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))));
    (BinNums.Coq_xO
       (BinNums.Coq_xI
          (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))));
    (BinNums.Coq_xI
       (BinNums.Coq_xO
          (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))));
    (BinNums.Coq_xO
       (BinNums.Coq_xO
          (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)))));
    (BinNums.Coq_xI
       (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH))));
    (BinNums.Coq_xO
       (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH))));
    (BinNums.Coq_xI
       (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH))));
    (BinNums.Coq_xO
       (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH))));
    (BinNums.Coq_xI
       (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))));
    (BinNums.Coq_xO
       (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))));
    (BinNums.Coq_xI
       (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))));
    (BinNums.Coq_xO
       (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH))));
    (BinNums.Coq_xI
       (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH))));
    (BinNums.Coq_xO
       (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH))));
    (BinNums.Coq_xI
       (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH))));
    (BinNums.Coq_xO
       (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH))));
    (BinNums.Coq_xI
       (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))));
    (BinNums.Coq_xO
       (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))));
    (BinNums.Coq_xI
       (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))));
    (BinNums.Coq_xO
       (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH))));
    (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH)));
    (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH)));
    (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH)));
    (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xI BinNums.Coq_xH)));
    (BinNums.Coq_xI (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)));
    (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH)));
    (BinNums.Coq_xI (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)));
    (BinNums.Coq_xO (BinNums.Coq_xO (BinNums.Coq_xO BinNums.Coq_xH)));
    (BinNums.Coq_xI (BinNums.Coq_xI BinNums.Coq_xH))];
  prog_main =
  (BinNums.Coq_xO
     (BinNums.Coq_xO
        (BinNums.Coq_xO
           (BinNums.Coq_xO (BinNums.Coq_xI (BinNums.Coq_xO BinNums.Coq_xH))))))
  } ;;