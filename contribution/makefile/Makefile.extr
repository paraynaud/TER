#######################################################################
#                                                                     #
#              The Compcert verified compiler                         #
#                                                                     #
#          Xavier Leroy, INRIA Paris-Rocquencourt                     #
#                                                                     #
#  Copyright Institut National de Recherche en Informatique et en     #
#  Automatique.  All rights reserved.  This file is distributed       #
#  under the terms of the GNU General Public License as published by  #
#  the Free Software Foundation, either version 2 of the License, or  #
#  (at your option) any later version.  This file is also distributed #
#  under the terms of the INRIA Non-Commercial License Agreement.     #
#                                                                     #
#######################################################################

# Second-stage Makefile, after Coq extraction

include Makefile.config

#
# Variables from Makefile.config:
# -OCAML_OPT_COMP: can we use the native version
# -COMPFLAGS: compile options
# -LINK_OPT: additional linker flags for the native binary
#

# Menhir configuration.

include Makefile.menhir

#
# Variables from Makefile.menhir:
# -MENHIR_INCLUDES: additional menhir include paths
# -MENHIR_LIBS: additional menhir libraries
#

# The pre-parser's error message database is compiled as follows.

cparser/pre_parser_messages.ml:
	$(MAKE) -C cparser correct

# Directories containing plain Caml code

DIRS=extraction \
  lib common $(ARCH) backend cfrontend cparser driver \
  exportclight debug extraction \
	# paulod fichier_mld

INCLUDES=$(patsubst %,-I %, $(DIRS))

# Control of warnings:

WARNINGS=-w +a-4-9-27 -strict-sequence -safe-string -warn-error +a #Deprication returns with ocaml 4.03
extraction/%.cmx: WARNINGS +=-w -20-27-32..34-39-41-44..45
extraction/%.cmo: WARNINGS +=-w -20-27-32..34-39-41-44..45
cparser/pre_parser.cmx: WARNINGS += -w -41
cparser/pre_parser.cmo: WARNINGS += -w -41

COMPFLAGS+=-g $(INCLUDES) $(MENHIR_INCLUDES) $(WARNINGS)

# Using .opt compilers if available

ifeq ($(OCAML_OPT_COMP),true)
DOTOPT=.opt
DOTOPT2=opt
else
DOTOPT=
DOTOPT2=c
endif

OCAMLC=ocamlc$(DOTOPT) $(COMPFLAGS)
OCAMLOPT=ocamlopt$(DOTOPT) $(COMPFLAGS)
OCAMLDEP=ocamldep$(DOTOPT) -slash $(INCLUDES)

OCAMLLEX=ocamllex -q
MODORDER=tools/modorder .depend.extr	

PARSERS=cparser/pre_parser.mly
LEXERS=cparser/Lexer.mll lib/Tokenize.mll \
	     lib/Readconfig.mll lib/Responsefile.mll

LIBS=str.cmxa unix.cmxa $(MENHIR_LIBS)
LIBS_BYTE=$(patsubst %.cmxa,%.cma,$(patsubst %.cmx,%.cmo,$(LIBS)))

EXECUTABLES=ccomp ccomp.byte cchecklink cchecklink.byte clightgen clightgen.byte
GENERATED=$(PARSERS:.mly=.mli) $(PARSERS:.mly=.ml) $(LEXERS:.mll=.ml) cparser/pre_parser_messages.ml

# Beginning of part that assumes .depend.extr already exists

ifeq ($(wildcard .depend.extr),.depend.extr)

CCOMP_OBJS:=  $(shell $(MODORDER) driver/Driver.cmx) 


#ajoutp ajoutde extraction paulo.cmx dans les besoin de ccomp
ccomp: $(CCOMP_OBJS) 
	@echo "Linking $@"
	@echo "Linking $+" > temporaire
	@ocamlfind $(OCAMLC2) -o $@ $(LIBS) $(LINK_OPT) -linkpkg -package ppx_deriving.show $+


ccomp.byte: $(CCOMP_OBJS:.cmx=.cmo)
	@echo "Linking $@"
	@$(OCAMLC) -o $@ $(LIBS_BYTE) $+

CLIGHTGEN_OBJS:=$(shell $(MODORDER) exportclight/Clightgen.cmx)

clightgen: $(CLIGHTGEN_OBJS)
	@echo "Linking $@"
	@ocamlfind$(OCAMLOPT) -o $@ $(LIBS) $(LINK_OPT) -linkpkg -package ppx_deriving.show $+

clightgen.byte: $(CLIGHTGEN_OBJS:.cmx=.cmo)
	@echo "Linking $@"
	@$(OCAMLC) -o $@ $(LIBS_BYTE) $+

include .depend.extr

endif



# End of part that assumes .depend.extr already exists

		# paulod
OCAMLFIND= ocamlfind
OCAMLC2=ocaml$(DOTOPT2) $(COMPFLAGS)


#necessit√© d utiliser comalfind pour utiliser ppx_deriving_show fonc modification
%.cmi: %.mli
	@echo "OCAMLC i $<"
	@$(OCAMLFIND) $(OCAMLC2) -c -package ppx_deriving.show $<
%.cmo: %.ml
	@echo "OCAMLC o $<"
	@$(OCAMLC) -c $<
%.cmx: %.ml
	@echo "OCAMLC x $<"
	@$(OCAMLFIND) $(OCAMLC2) -c -package ppx_deriving.show $<

%.ml: %.mll
	$(OCAMLLEX) $<


clean:
	rm -f $(EXECUTABLES)
	rm -f $(GENERATED)
	for d in $(DIRS); do rm -f $$d/*.cm[iotx] $$d/*cmti $$d/*.o; done
	$(MAKE) -C cparser clean

# Generation of .depend.extr

clean2: 
	rm -f $(GENERATED)




depend: $(GENERATED)
	echo "Analyzing OCaml dependencies"
	echo ""
	echo ""
	echo ""
	@$(OCAMLDEP) $(foreach d,$(DIRS),$(wildcard $(d)/*.ml)) $(GENERATED) >.depend.extr || { rm -f .depend.extr; exit 2; }
	@$(OCAMLDEP) $(foreach d,$(DIRS),$(wildcard $(d)/*.mli)) $(GENERATED) >>.depend.extr || { rm -f .depend.extr; exit 2; }
	echo "fin de edepend"
